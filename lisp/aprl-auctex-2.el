
;;------------------------------------------------------------------------------
;;
;;    This file is part of aprl-emacs.
;;
;;    aprl-emacs is free software: you can redistribute it and/or modify
;;    it under the terms of the GNU General Public License as published by
;;    the Free Software Foundation, either version 3 of the License, or
;;    (at your option) any later version.
;;
;;    aprl-emacs is distributed in the hope that it will be useful,
;;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;    GNU General Public License for more details.
;;
;;    You should have received a copy of the GNU General Public License
;;    along with aprl-emacs.  If not, see <http://www.gnu.org/licenses/>.
;;
;;------------------------------------------------------------------------------


(require 'aprl-utils)


;; enable latexmk as Tex-command-default
;; designate Skim.app as viewer (OS X)

(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    ;; (defadvice TeX-recenter-output-buffer (after TeX-output-buffer-scroll-to-bottom)
	    ;;   (goto-char (point-max)))
	    ;; http://www.stefanom.org/setting-up-a-nice-auctex-environment-on-mac-os-x/
	    (push
	     '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
	       :help "Run latexmk on file")
	     TeX-command-list)))

(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (let* ((pdfviewer "Preview.app"))
		   ;; (view-command `("View"
		   ;; 		   ,(format "open -a \"%s\" %%s.pdf" pdfviewer)
		   ;; 		   TeX-run-discard-or-function t t
		   ;; 		   :help "Run Viewer")))
	      (setq-default TeX-master nil)
	      (setq TeX-output-view-style
		    `(("^dvi$" "^xdvi$" "xdvi %dS %d")
		      ("^dvi$" "." "open %dS %d")
		      ;;("^pdf$" "." "open %o")
		      ("^pdf$" "." ,(format "open -a \"%s\" %%o" pdfviewer))
		      ("^html?$" "." "open %o")))
	      (setq TeX-command-default "latexmk");;"LaTeX")
	      (setq TeX-PDF-mode t)
	      ;; (setq TeX-command-list
	      ;; 	    (mapcar (lambda (x) (if (equal (car x) "View") view-command x))
	      ;; 		    TeX-command-list))
	      (add-to-list 'TeX-command-list
			   `("View"
			     ,(format "open -a \"%s\" %%s.pdf" pdfviewer)
			     TeX-run-discard-or-function t t
			     :help "Run Viewer"))
	      (add-to-list 'TeX-command-list
			   '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t)))))

(eval-after-load "tex-buf"
  '(progn
     (defun TeX-command-query (name)
       "Query the user for what TeX command to use."
       (let* ((default
		(cond ((if (string-equal name TeX-region)
			   (TeX-check-files (concat name "." (TeX-output-extension))
					    (list name)
					    TeX-file-extensions)
			 (TeX-save-document (TeX-master-file)))
		       TeX-command-default)
		      ((and (memq major-mode '(doctex-mode latex-mode))
			    ;; Want to know if bib file is newer than .bbl
			    ;; We don't care whether the bib files are open in emacs
			    (TeX-check-files (concat name ".bbl")
					     (mapcar 'car
						     (LaTeX-bibliography-list))
					     (append BibTeX-file-extensions
						     TeX-Biber-file-extensions)))
		       ;; We should check for bst files here as well.
		       (if LaTeX-using-Biber TeX-command-Biber TeX-command-BibTeX))
		      ((TeX-process-get-variable name
						 'TeX-command-next
						 ;; TeX-command-Show))
						 TeX-command-default)) ; ST edit
		      ;; (TeX-command-Show)))                          ; ST edit
		      (TeX-command-default)))
	      (completion-ignore-case t)
	      (answer (or TeX-command-force
			  (completing-read
			   (concat "Command: (default " default ") ")
			   (TeX-mode-specific-command-list major-mode) nil t
			   nil 'TeX-command-history))))
	 ;; If the answer is "latex" it will not be expanded to "LaTeX"
	 (setq answer (car-safe (TeX-assoc answer TeX-command-list)))
	 (if (and answer
		  (not (string-equal answer "")))
	     answer
	   default)))))


(defun aprl-TeX-clean (&optional arg)
  "Delete files generated by latexmk. Like 'latexmk -C \"{master}.tex\"' but also removes .bbl file (which can cause trouble when switching between bibtex and biblatex) and optionally removes biber cache when prefix argument is provided."
  (interactive "P")
  (let ((types (list ".aux" ".bbl" ".blg" ".bcf" ".run.xml"
		     ".fls" ".log" ".fdb_latexmk"
		     ".snm" ".nav" ".out"))
	(name TeX-master)
	(ext nil)
	(filelist nil)
	(biber-buff "*rm-biber-cache*")
	(biber-proc nil)
	(outgoing ""))
    (when (or (not name) (eq name t))
      (setq name (file-name-base buffer-file-name)))
    ;; delete files
    (if name
	(progn
	  (dolist (ext types filelist)
	    (let ((filename (concat name ext)))
	      (when (file-exists-p filename)
		(add-to-list 'filelist filename t)
		(delete-file filename))))
	  (princ (format "deleted: %s" (if filelist (mapconcat 'identity filelist ", ")
					 "none")))
	  ;; rm biber cache
	  (when arg
	    (setq biber-proc (start-process "rm-biber-cache" biber-buff
					    "rm" "-rf" "`biber --cache`"))
	    (set-process-sentinel
	     biber-proc
	     '(lambda (p e)
		(princ (format "; %s %s" p (aprl-trim-string e)))))))
      (princ "no TeX-master"))))

;; The non-dolist version of a simple LaTeX-cleanmk. Maybe more readable.
;; Not up-to-date.
;;
;; (defun aprl-TeX-cleanmk ()
;;   (interactive)
;;   (let ((types (list ".aux" ".bbl" ".blg" ".bcf" ".run.xml"
;; 		     ".fls" ".log" ".fdb_latexmk"
;; 		     ".snm" ".nav" ".out"))
;; 	name files files-present)
;;     (setq name TeX-master)
;;     (when (or (not name) (eq name t))
;;       (setq name (file-name-base buffer-file-name)))
;;     (if name
;; 	(progn
;; 	  (setq files (mapcar '(lambda (ext) (concat name ext)) types))
;; 	  (setq files-present (remove-if-not 'file-exists-p files))
;; 	  (mapc 'delete-file files-present)
;; 	  (message "deleted: %s" (mapconcat 'identity files-present ", ")))
;;       (message "no TeX-master"))))

;; This is the updated version of the function above but I like printing names of the deleted files
(defun aprl-TeX-clean (&optional arg)
  "Clean auxiliary files (TeX-clean). Additionally, when prefix argument is... 0: delete both output files and biber cache, 1: delete output files (TeX-clean t), else: delete biber cache but keep output files."
  (interactive "P")
  (cl-flet ((rm-biber-cache ()
			    (delete-directory
			     (aprl-trim-string (shell-command-to-string "biber --cache"))
			     t)))
    (let ((flist-preclean nil)
	  (flist-postclean nil)
	  (TeX-clean-confirm nil))
      (setq flist-preclean (directory-files "."))
      (cond ((eq 0 arg)
	     (TeX-clean t)
	     (rm-biber-cache))
	    ((eq 1 arg)
	     (TeX-clean t))
	    ((bound-and-true-p arg)
	      (TeX-clean)
	      (rm-biber-cache))
	    (t
	     (TeX-clean)))
      (setq flist-postclean (directory-files "."))
      (message "deleted: %s"
	       (mapconcat 'identity
			  (cl-set-difference flist-preclean
					     flist-postclean
					     :test #'string-equal)
			  " ")))))

;; C-c d is too close to "C-c C-d" (TeX-save-document)
(add-hook 'LaTeX-mode-hook '(lambda ()
			      (local-set-key (kbd "C-c D") 'aprl-TeX-clean)))

